# How to create a biobox

Bioboxes provides an interface definition to allow Docker containers of the
same type to be interchangeable. This page provides a step by step description
for creating a simple biobox. This guide provides instructions for creating an
assembler biobox for version 0.9.0+. This guide requires you have familiarity
with [unix commands][] and [Docker][].

[unix commands]: http://en.wikipedia.org/wiki/List_of_Unix_commands
[Docker]: http://www.docker.com

## Creating a Docker image

Docker uses the concepts "images" and "containers". An image can be thought of
as a blueprint of your tool, including all the dependencies it needs to run.
When you use a Docker image, such as passing FASTQ data, then you create an
live instance of the image running on your system. This is called a container.

The first step to creating an image of your tool is to write a Dockerfile. Each
line in a Dockerfile is a set of instructions that are to build an image. Below
is an example Dockerfile which you can copy. There is more [detailed
documentation available for building Dockerfiles][Dockerfile].

[Dockerfile]:https://docs.docker.com/reference/builder/

This example sets the base image operating system as Ubuntu version 14:04 using
the `BASE` directive. Next you should specify your name and email address
using the `MAINTAINER` line. The last line install the [velvet][] genome
assembler using the apt package manager. This line is broken across two lines
using `\`, this makes the Dockerfile easier to read as opposed to very long
lines.

[velvet]:https://www.ebi.ac.uk/~zerbino/velvet/

~~~ Dockerfile
FROM ubuntu:14.04
MAINTAINER first_name last_name, mail@example.com
RUN apt-get update -y && \
    apt-get install -y --no-install-recommends velvet
~~~

You can test this example Dockerfile by building an image. The `--tag`
specifies what the image should be called. In this case "velvet", because this
is the name of the assembler.

~~~ shell
docker build --tag velvet .
~~~

If this builds successfully you should have a velvet Docker image available on
your system. You list all your images with the command.

~~~ shell
docker images
~~~

You can create a container from this image and then log into it. This will
allow you to test that the internals are correct.

~~~ shell
docker run --interactive --tty velvet /bin/bash
~~~

This is specifies you want to log into a velvet container interactively and run
the command `/bin/bash`. When you run this you should a prompt inside your
container. You can test that velvet is available:

~~~ shell
velveth
~~~

You can now exit this container with `CTRL+D`.

## Read the rfc

Bioboxes provides RFC documents describing the interface. Each biobox of the
same type should have the same interface, and therefore can be swapped with
each other. The interface is represented by a YAML file and each assembler has
biobox specific [inputs][] and [outputs][].

[inputs]:https://github.com/bioboxes/rfc/blob/master/container/short-read-assembler/rfc.mkd#inputs
[outputs]:https://github.com/bioboxes/rfc/blob/master/container/short-read-assembler/rfc.mkd#outputs

  1. The first step is to check if your tool would work with the provided
     types. In the assembler biobox specification this would be the `fastq` and
     `fragment_size` types. If your assembler works with just providing the
     `fastq` parameter then you don't have to include the `fragment_size`
     parameter. 
     
  2. If you can not implement your biobox then just create a [new issue][]. The
     bioboxes community will help.

  3. Each YAML that will be provided to your container should be tested with
     our [file-validator binary][binary]. The command line interface for this
     tool is:

~~~ shell
validate-biobox-file --schema=schema.yml --input=input.yml
~~~

[new issue]: https://github.com/bioboxes/rfc/issues/new
[binary]: https://s3-us-west-1.amazonaws.com/bioboxes-tools/validate-biobox-file/0.x.y/validate-biobox-file.tar.xz

Each RFC links to a schema file that can be used with a validator to ensure the
data the user has provided is valid. There is a description and downloads
available for the [biobox file validator][validator].

[validator]: /validate-biobox-file/

### Example

The velvet example works with just the provided FASTQ type. The above
Dockerfile together with the `file-validator` looks like this:

~~~ Dockerfile
FROM ubuntu:14.04
MAINTAINER first_name last_name, mail@example.com

RUN apt-get update -y && \
    apt-get install -y --no-install-recommends \
    velvet wget zx-utils

# Locations for biobox validator
ENV BASE_URL  https://s3-us-west-1.amazonaws.com/bioboxes-tools/validate-biobox-file
ENV VERSION   0.x.y
ENV VALIDATOR /biobox-validator

# Install the biobox file validator
RUN mkdir ${VALIDATOR}
RUN wget \
      --quiet \
      --output-document - \
      ${BASE_URL}/${VERSION}/validate-biobox-file.tar.xz \
    | tar xJf - \
      --directory ${VALIDATOR} \
      --strip-components=1
ENV PATH ${PATH}:${VALIDATOR}

# Fetch the schema file
RUN wget \
    --output-document /schema.yaml
    https://raw.githubusercontent.com/bioboxes/rfc/master/container/short-read-assembler/input_schema.yaml

~~~

This downloads the [biobox file validator][validator] and adds it to the $PATH.
The corresponding biobox assembler schema is also downloaded.

## Create a task

A biobox is called with a "task" parameter. Tasks allow the same assembler to
be run with different combinations of parameters. You can also think of a task
as a command bundle that groups different command line flags together into a
simpler interface. Each biobox should provide a "default" task which should be
the set of command line flags that work best in most situations.

In this velvet example we'll create a script that provides the `default` task.
We'll define this in a file called `Taskfile`. You can see this `Taskfile`
contains the commands to run velvet along with environment variables.

~~~ shell
default: velveth ${TMP_DIR} 31 -fastq.gz ${READS} && velvetg ${TMP_DIR} -cov_cutoff auto
~~~

## Putting everything together

Now that we have specified our tasks, integrated the file-validator, we will
write a script to combine everything. This script will do the following:

  1. Check if the provided biobox.yaml is the correct format using the
     file-validator.
  2. Runs the specified task.
  3. Generate an output YAML file and return the assembled contigs. 

~~~shell
#!/bin/bash

set -o errexit
set -o nounset

INPUT=/bbx/input/biobox.yaml
OUTPUT=/bbx/output/bbx
TASK=$1

# Ensure the biobox.yaml file is valid
validate-biobox-file --input ${INPUT} --schema /schema.yaml
mkdir -p ${OUTPUT}

# Parse the read locations from this file
READS=$(yaml2json < ${INPUT} \
        | jq --raw-output '.arguments[] | select(has("fastq")) | .fastq[].value | "-short \(.)"' \
        | tr '\n' ' ')

TMP_DIR=$(mktemp -d)

# Run the given task
CMD=$(egrep ^${TASK}: /Taskfile | cut -f 2 -d ':')
if [[ -z ${CMD} ]]; then
  echo "Abort, no task found for '${TASK}'."
  exit 1
fi
eval ${CMD}

cp ${TMP_DIR}/contigs.fa ${OUTPUT}

cat << EOF > ${OUTPUT}/biobox.yaml
version: 0.9.0
arguments:
  - fasta:
    - id: velvet_contigs_1
      value: contigs.fa
      type: contigs
EOF
~~~

This script first checks the given `/bbx/input/biobox.yaml` file with the
`validate-biobox-file`. Next `yaml2json` is used to transform the YAML to JSON
and the [jq][] tool fetches the paths of the FASTQ entries. Once we have the
paths to the fastq files, one of the task methods is called. On successful run
a bioboxes.yaml is created as specified in the [outputs][] section.

## Test it

The last step is now to check if your created container follows the bioboxes
specification. In our [bioboxes assembler validator][] section see how to
validate your container.

~~~ shell
# Fetch an example assembler biobox for testing
git clone git@github.com:bioboxes/velvet.git

docker run \
  --privileged \
  --rm \
  --env IMAGE=velvet \
  --env TASK=default \
  --volume $(pwd)/velvet:/build \
  bioboxes/validator-short-read-assembler
~~~

You can find the final [biobox velvet][] example in our Github repository.

[jq]:http://stedolan.github.io/jq/
[bioboxes assembler validator]:http://bioboxes.org/validator/short-read-assembler/
[biobox velvet]:https://github.com/bioboxes/velvet
